# base-image for python on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
FROM balenalib/%%BALENA_MACHINE_NAME%%

# use apt-get if you need to install dependencies,
RUN install_packages \
    make git gcc g++ build-essential libssl-dev libffi-dev zlib1g-dev libopenjp2-7 libjpeg-dev python3 python3-dev curl software-properties-common  \
    python3-pip python3-pil python3-pil.imagetk python3-tk xserver-xorg-core xserver-xorg-input-all xserver-xorg-video-fbdev xorg tk-dev
    
RUN echo "#!/bin/bash" > /etc/X11/xinit/xserverrc \
  && echo "" >> /etc/X11/xinit/xserverrc \
  && echo 'exec /usr/bin/X -s 0 dpms -nocursor -nolisten tcp "$@"' >> /etc/X11/xinit/xserverrc

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY ./requirements.txt /requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip3 install setuptools
RUN pip3 install -r /requirements.txt

# This will copy all files in our root to the working  directory in the container
COPY . ./

# switch on systemd init system in container
ENV INITSYSTEM on
ENV DISPLAY :0

# main.py will run when container starts up on the device
#CMD modprobe i2c-dev && python -u src/iota_terminal.py
#CMD modprobe i2c-dev && python -u src/iota_tft.py
CMD src/start.sh